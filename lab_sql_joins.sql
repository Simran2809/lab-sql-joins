-- Challenge - Joining on multiple tables
-- Write SQL queries to perform the following tasks using the Sakila database:
USE sakila;

-- 1. List the number of films per category.
SELECT c.name AS category, COUNT(*) AS film_count
FROM film_category as fc
JOIN category as c 
ON fc.category_id = c.category_id
GROUP BY c.name;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT s.store_id, a.city_id, co.country
FROM store as s
JOIN address as a 
ON s.address_id = a.address_id
JOIN city as ci 
ON a.city_id = ci.city_id
JOIN country as co 
ON ci.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store as s
JOIN customer as c 
ON s.store_id = c.store_id
JOIN payment as p 
ON c.customer_id = p.customer_id
GROUP BY s.store_id;

-- 4. Determine the average running time of films for each category.
SELECT c.name AS category, AVG(f.length) AS average_running_time
FROM film_category as fc
JOIN category as c 
ON fc.category_id = c.category_id
JOIN film as f 
ON fc.film_id = f.film_id
GROUP BY c.name;

-- 5. Identify the film categories with the longest average running time.
SELECT c.name AS category, AVG(f.length) AS average_running_time
FROM film_category as fc
JOIN category as c 
ON fc.category_id = c.category_id
JOIN film as f 
ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY average_running_time DESC;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(*) AS rental_count
FROM film as f
JOIN inventory as i 
ON f.film_id = i.film_id
JOIN rental as r 
ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;


-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title, s.store_id
FROM film as f
JOIN inventory as i 
ON f.film_id = i.film_id
JOIN store as s 
ON i.store_id = s.store_id
WHERE f.title = 'Academy Dinosaur' AND s.store_id = 1;
